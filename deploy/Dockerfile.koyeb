FROM ubuntu AS builder

RUN apt update && apt install curl unzip jq -y

ARG IS_PROD
ENV IS_PROD=$IS_PROD
ARG FLAVOR
ENV FLAVOR=$FLAVOR
ARG BUILD_ON_HOST
ENV BUILD_ON_HOST=$BUILD_ON_HOST
ARG COMPOSE_PROFILES
ENV COMPOSE_PROFILES=$COMPOSE_PROFILES
ARG COMPOSE_PROJECT_NAME
ENV COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME
ARG SEARCH_SERVICE
ENV SEARCH_SERVICE=$SEARCH_SERVICE
ARG STACK_VERSION
ENV STACK_VERSION=$STACK_VERSION
ARG CLUSTER_NAME
ENV CLUSTER_NAME=$CLUSTER_NAME
ARG LICENSE
ENV LICENSE=$LICENSE
ARG KIBANA_PORT
ENV KIBANA_PORT=$KIBANA_PORT
ARG KIBANA_PASSWORD
ENV KIBANA_PASSWORD=$KIBANA_PASSWORD
ARG ENCRYPTION_KEY
ENV ENCRYPTION_KEY=$ENCRYPTION_KEY
ARG ELASTIC_URL
ENV ELASTIC_URL=$ELASTIC_URL
ARG ES_PORT
ENV ES_PORT=$ES_PORT
ARG CERTS_DIR
ENV CERTS_DIR=$CERTS_DIR
ARG CERT_FILE
ENV CERT_FILE=$CERT_FILE
ARG ELASTIC_NAME
ENV ELASTIC_NAME=$ELASTIC_NAME
ARG ELASTIC_PASSWORD
ENV ELASTIC_PASSWORD=$ELASTIC_PASSWORD
ARG MEDIA_SERVICE
ENV MEDIA_SERVICE=$MEDIA_SERVICE
ARG MINIO_URL
ENV MINIO_URL=$MINIO_URL
ARG MINIO_PORT
ENV MINIO_PORT=$MINIO_PORT
ARG MINIO_PORT_CONSOLE
ENV MINIO_PORT_CONSOLE=$MINIO_PORT_CONSOLE
ARG MINIO_NAME
ENV MINIO_NAME=$MINIO_NAME
ARG MINIO_PASS
ENV MINIO_PASS=$MINIO_PASS
ARG DATABASE_URI
ENV DATABASE_URI=$DATABASE_URI
ARG DATABASE_PORT
ENV DATABASE_PORT=$DATABASE_PORT
ARG DATABASE_DB
ENV DATABASE_DB=$DATABASE_DB
ARG DATABASE_DRIVER
ENV DATABASE_DRIVER=$DATABASE_DRIVER
ARG DATABASE_USER
ENV DATABASE_USER=$DATABASE_USER
ARG DATABASE_PASS
ENV DATABASE_PASS=$DATABASE_PASS
ARG DATABASE_FRONT
ENV DATABASE_FRONT=$DATABASE_FRONT
ARG HMAC_KEY
ENV HMAC_KEY=$HMAC_KEY
ARG BUNKER_VERSION
ENV BUNKER_VERSION=$BUNKER_VERSION
ARG BUNKER_PORT
ENV BUNKER_PORT=$BUNKER_PORT
ARG BUNKER_PORT_SECRET
ENV BUNKER_PORT_SECRET=$BUNKER_PORT_SECRET
ARG SERVER_PORT
ENV SERVER_PORT=$SERVER_PORT
ARG SERVER_URL
ENV SERVER_URL=$SERVER_URL
ARG WS_SERVER_URL
ENV WS_SERVER_URL=$WS_SERVER_URL
ARG PRE_SET_ENABLE
ENV PRE_SET_ENABLE=$PRE_SET_ENABLE
ARG PRE_SET_WORKING_DIR
ENV PRE_SET_WORKING_DIR=$PRE_SET_WORKING_DIR
ARG PRE_SET_SCRIPT
ENV PRE_SET_SCRIPT=$PRE_SET_SCRIPT
ARG PRE_SET_ENCRYPTED_URI
ENV PRE_SET_ENCRYPTED_URI=$PRE_SET_ENCRYPTED_URI
ARG PRE_SET_ENCRYPTED_PASSWORD
ENV PRE_SET_ENCRYPTED_PASSWORD=$PRE_SET_ENCRYPTED_PASSWORD


WORKDIR /app

COPY scripts ./scripts

RUN sh scripts/download_data.sh $PRE_SET_ENCRYPTED_URI $PRE_SET_ENCRYPTED_PASSWORD

RUN sh scripts/manual-download-docker-image.sh

FROM koyeb/docker-compose

RUN apk add --no-cache git openjdk17-jdk

ARG IS_PROD
ENV IS_PROD=$IS_PROD
ARG FLAVOR
ENV FLAVOR=$FLAVOR
ARG BUILD_ON_HOST
ENV BUILD_ON_HOST=$BUILD_ON_HOST
ARG COMPOSE_PROFILES
ENV COMPOSE_PROFILES=$COMPOSE_PROFILES
ARG COMPOSE_PROJECT_NAME
ENV COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME
ARG SEARCH_SERVICE
ENV SEARCH_SERVICE=$SEARCH_SERVICE
ARG STACK_VERSION
ENV STACK_VERSION=$STACK_VERSION
ARG CLUSTER_NAME
ENV CLUSTER_NAME=$CLUSTER_NAME
ARG LICENSE
ENV LICENSE=$LICENSE
ARG KIBANA_PORT
ENV KIBANA_PORT=$KIBANA_PORT
ARG KIBANA_PASSWORD
ENV KIBANA_PASSWORD=$KIBANA_PASSWORD
ARG ENCRYPTION_KEY
ENV ENCRYPTION_KEY=$ENCRYPTION_KEY
ARG ELASTIC_URL
ENV ELASTIC_URL=$ELASTIC_URL
ARG ES_PORT
ENV ES_PORT=$ES_PORT
ARG CERTS_DIR
ENV CERTS_DIR=$CERTS_DIR
ARG CERT_FILE
ENV CERT_FILE=$CERT_FILE
ARG ELASTIC_NAME
ENV ELASTIC_NAME=$ELASTIC_NAME
ARG ELASTIC_PASSWORD
ENV ELASTIC_PASSWORD=$ELASTIC_PASSWORD
ARG MEDIA_SERVICE
ENV MEDIA_SERVICE=$MEDIA_SERVICE
ARG MINIO_URL
ENV MINIO_URL=$MINIO_URL
ARG MINIO_PORT
ENV MINIO_PORT=$MINIO_PORT
ARG MINIO_PORT_CONSOLE
ENV MINIO_PORT_CONSOLE=$MINIO_PORT_CONSOLE
ARG MINIO_NAME
ENV MINIO_NAME=$MINIO_NAME
ARG MINIO_PASS
ENV MINIO_PASS=$MINIO_PASS
ARG DATABASE_URI
ENV DATABASE_URI=$DATABASE_URI
ARG DATABASE_PORT
ENV DATABASE_PORT=$DATABASE_PORT
ARG DATABASE_DB
ENV DATABASE_DB=$DATABASE_DB
ARG DATABASE_DRIVER
ENV DATABASE_DRIVER=$DATABASE_DRIVER
ARG DATABASE_USER
ENV DATABASE_USER=$DATABASE_USER
ARG DATABASE_PASS
ENV DATABASE_PASS=$DATABASE_PASS
ARG DATABASE_FRONT
ENV DATABASE_FRONT=$DATABASE_FRONT
ARG HMAC_KEY
ENV HMAC_KEY=$HMAC_KEY
ARG BUNKER_VERSION
ENV BUNKER_VERSION=$BUNKER_VERSION
ARG BUNKER_PORT
ENV BUNKER_PORT=$BUNKER_PORT
ARG BUNKER_PORT_SECRET
ENV BUNKER_PORT_SECRET=$BUNKER_PORT_SECRET
ARG SERVER_PORT
ENV SERVER_PORT=$SERVER_PORT
ARG SERVER_URL
ENV SERVER_URL=$SERVER_URL
ARG WS_SERVER_URL
ENV WS_SERVER_URL=$WS_SERVER_URL
ARG PRE_SET_ENABLE
ENV PRE_SET_ENABLE=$PRE_SET_ENABLE
ARG PRE_SET_WORKING_DIR
ENV PRE_SET_WORKING_DIR=$PRE_SET_WORKING_DIR
ARG PRE_SET_SCRIPT
ENV PRE_SET_SCRIPT=$PRE_SET_SCRIPT
ARG PRE_SET_ENCRYPTED_URI
ENV PRE_SET_ENCRYPTED_URI=$PRE_SET_ENCRYPTED_URI
ARG PRE_SET_ENCRYPTED_PASSWORD
ENV PRE_SET_ENCRYPTED_PASSWORD=$PRE_SET_ENCRYPTED_PASSWORD


WORKDIR /app

COPY . .

COPY <<EOF ./generated-mini.env
IS_PROD=${IS_PROD}
FLAVOR=${FLAVOR}
BUILD_ON_HOST=${BUILD_ON_HOST}
COMPOSE_PROFILES=${COMPOSE_PROFILES}
COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
SEARCH_SERVICE=${SEARCH_SERVICE}
STACK_VERSION=${STACK_VERSION}
CLUSTER_NAME=${CLUSTER_NAME}
LICENSE=${LICENSE}
KIBANA_PORT=${KIBANA_PORT}
KIBANA_PASSWORD=${KIBANA_PASSWORD}
ENCRYPTION_KEY=${ENCRYPTION_KEY}
ELASTIC_URL=${ELASTIC_URL}
ES_PORT=${ES_PORT}
CERTS_DIR=${CERTS_DIR}
CERT_FILE=${CERT_FILE}
ELASTIC_NAME=${ELASTIC_NAME}
ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
MEDIA_SERVICE=${MEDIA_SERVICE}
MINIO_URL=${MINIO_URL}
MINIO_PORT=${MINIO_PORT}
MINIO_PORT_CONSOLE=${MINIO_PORT_CONSOLE}
MINIO_NAME=${MINIO_NAME}
MINIO_PASS=${MINIO_PASS}
DATABASE_URI=${DATABASE_URI}
DATABASE_PORT=${DATABASE_PORT}
DATABASE_DB=${DATABASE_DB}
DATABASE_DRIVER=${DATABASE_DRIVER}
DATABASE_USER=${DATABASE_USER}
DATABASE_PASS=${DATABASE_PASS}
DATABASE_FRONT=${DATABASE_FRONT}
HMAC_KEY=${HMAC_KEY}
BUNKER_VERSION=${BUNKER_VERSION}
BUNKER_PORT=${BUNKER_PORT}
BUNKER_PORT_SECRET=${BUNKER_PORT_SECRET}
SERVER_PORT=${SERVER_PORT}
SERVER_URL=${SERVER_URL}
WS_SERVER_URL=${WS_SERVER_URL}
PRE_SET_ENABLE=${PRE_SET_ENABLE}
PRE_SET_WORKING_DIR=${PRE_SET_WORKING_DIR}
PRE_SET_SCRIPT=${PRE_SET_SCRIPT}
PRE_SET_ENCRYPTED_URI=${PRE_SET_ENCRYPTED_URI}
PRE_SET_ENCRYPTED_PASSWORD=${PRE_SET_ENCRYPTED_PASSWORD}
EOF


COPY --from=builder /app/data ./deploy/pre_set_data
COPY --from=builder /app/deploy/docker-images ./deploy/docker-images

ENV IS_HOST=TRUE

RUN --mount=type=cache,target=/root/.gradle \
    sh scripts/build-server-on-condition.sh

CMD sh ./scripts/build-koyeb.sh
